slicing strings
s = 'monty python'
print(s[0:4])  # prints 'mont' s sub zero trough four

print(S[6:7]) #prints p

print (s[6:20]) # prints python

omit the start or end of slicing string
s= 'Monty Python'
print (s[:2])
Mo

print(s[8:])
thon

print(s[:])
Monty Python

string concatenation
as = 'hello'
bs = as + 'there'
print(bs)
hellothere
c = a + ' ' +'there'
print(c)
hello there

using in as a logical operator

fruit = 'banana'
'n' in fruit #True
'm' in fruit #False
'nan' in fruit #True
if 'a' in fruit:
    print('found it!')
#found it!

string comparison

if word == 'banana':
    print('all right, bananas.')

if word < 'banana':
    print('your word,'+ word+', comes before banana.')
elif word > 'banana':
    print('your word,'+ word+', comes before banana.')
else:
    print('all right, bananas.')

string library lower()
>>>greet = 'Hello Bob'
>>>zap = greet.lower()
>>>print(zap)
hello bob

>>>print(greet)
Hello Bob

>>>print('Hi There'.lower())
hi there

>>>stuff = 'Hello Bob'
type(Stuff)
<class 'str'>
>>>dir(Stuff)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] 

there are all method or things we can do to the letters or strings

string library
str.capitalize()
str.center(width[, fillchar])
str.endswith(suffux[,start[, end]])
str.find(sub[,start [,end]])
str.lstrip([chars])
str.replace(old,new[,count])
str.lower()
str.rstrip([chars])
str.strip([chars])
str.upper()

sraeching a string using find()
fruit = 'banana'
pos = fruit.find('na')
print(pos)
2

aa = fruit.find('z')
print(aa)
-1

making upper and lower

>>>greet = 'Hello Bob'
>>>nnn = greet.upper()
>>>print(nnn)
HELLO BOB
>>>www = greet.lower()
>>>print (www)
hello bob

search and replace

>>>greet = 'Hello Bob'
>>>nstr = greet.replace('Bob' , 'Alice')
>>>print(nstr)
Hello Alice
>>>nstr= greet.replace('o','X')
>>>print(nstr)
Hellx Bxb

stripping whitespace
>>>greet = '    Hello  Bob   '
>>>greet.lstrip()
'Hello  Bob   '
>>>greet.rstrip()
'    Hello Bob'
>>>greet.strip()
'Hello Bob'

Prefixes
>>>line = 'Please have a nice day'
>>>line.startswith('Please')
True
>>>line.startswith('p')
False

Parsing and extracting
From stephen.marquaed@uct.ac.za Sat Jan 5 09:14:16 2008

>>>data = 'From stephen.marquaed@uct.ac.za Sat Jan 5 09:14:16 2008'
>>>atpos = data.find('@')
>>>print(atpos)
21
>>>sppos = data.find(' ',atpos)
>>>print(sppos)
31
>>>host = data[atpos+1: sppos]
>>>print(host)
uct.ac.za

summary
-strings
-read/convert
-indexing string[]
-slicing strings[2:4]
-looping through strings with for and while
-concatenating strings with +
-string operations
-string library
-string comparison
-searching in strings
-replacing text
-stripping whitespace

just slicing and dice but not made any meal yet 
